// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/raft/example/proto/hello.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/vine-io/apimachinery/apis/meta/v1"
	vine "github.com/vine-io/vine"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	openapi "github.com/vine-io/vine/lib/api/handler/openapi"
	openapipb "github.com/vine-io/vine/lib/api/handler/openapi/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for Test service
func NewTestEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:        "Test.GetProduct",
			Description: "Test.GetProduct",
			Path:        []string{"/api/v1/products/{id}"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "Test.CreateProduct",
			Description: "Test.CreateProduct",
			Path:        []string{"/api/v1/products"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for Test service
func NewTestOpenAPI() *openapipb.OpenAPI {
	return &openapipb.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapipb.OpenAPIInfo{
			Title:       "TestService",
			Description: "OpenAPI3.0 for Test",
			Version:     "v1.0.0",
		},
		Servers: []*openapipb.OpenAPIServer{},
		Tags: []*openapipb.OpenAPITag{
			&openapipb.OpenAPITag{
				Name:        "Test",
				Description: "OpenAPI3.0 for Test",
			},
		},
		Paths: map[string]*openapipb.OpenAPIPath{
			"/api/v1/products": &openapipb.OpenAPIPath{
				Post: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"Test"},
					Description: "Test CreateProduct",
					OperationId: "TestCreateProduct",
					RequestBody: &openapipb.PathRequestBody{
						Description: "CreateProduct CreateProductRequest",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.raft.example.proto.CreateProductRequest",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.raft.example.proto.CreateProductResponse"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/products/{id}": &openapipb.OpenAPIPath{
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"Test"},
					Description: "Test GetProduct",
					OperationId: "TestGetProduct",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "id",
							In:          "path",
							Description: "GetProductRequest field id",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.raft.example.proto.GetProductResponse"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
		},
		Components: &openapipb.OpenAPIComponents{
			SecuritySchemes: &openapipb.SecuritySchemes{},
			Schemas: map[string]*openapipb.Model{
				"github.com.vine-io.raft.example.proto.CreateProductRequest": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"company": &openapipb.Schema{
							Type: "string",
						},
					},
				},
				"github.com.vine-io.raft.example.proto.CreateProductResponse": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"product": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.raft.example.proto.Product",
						},
					},
				},
				"github.com.vine-io.raft.example.proto.GetProductRequest": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"id": &openapipb.Schema{
							Type: "string",
						},
					},
				},
				"github.com.vine-io.raft.example.proto.GetProductResponse": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"product": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.raft.example.proto.Product",
						},
					},
				},
				"github.com.vine-io.raft.example.proto.Product": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"typeMeta": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.apimachinery.apis.meta.v1.TypeMeta",
						},
						"id": &openapipb.Schema{
							Type: "string",
						},
						"date": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"company": &openapipb.Schema{
							Type: "string",
						},
					},
				},
				"github.com.vine-io.apimachinery.apis.meta.v1.TypeMeta": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"kind": &openapipb.Schema{
							Type: "string",
						},
						"apiVersion": &openapipb.Schema{
							Type: "string",
						},
					},
				},
			},
		},
	}
}

// Client API for Test service
// +gen:openapi
type TestService interface {
	// +gen:get=/api/v1/products/{id}
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error)
	// +gen:post=/api/v1/products
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error) {
	req := c.c.NewRequest(c.name, "Test.GetProduct", in)
	out := new(GetProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "Test.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service
// +gen:openapi
type TestHandler interface {
	// +gen:get=/api/v1/products/{id}
	GetProduct(*vine.Context, *GetProductRequest, *GetProductResponse) error
	// +gen:post=/api/v1/products
	CreateProduct(*vine.Context, *CreateProductRequest, *CreateProductResponse) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) error {
	type testImpl interface {
		GetProduct(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error
		CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error
	}
	type Test struct {
		testImpl
	}
	h := &testHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "Test.GetProduct",
		Description: "Test.GetProduct",
		Path:        []string{"/api/v1/products/{id}"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "Test.CreateProduct",
		Description: "Test.CreateProduct",
		Path:        []string{"/api/v1/products"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	openapi.RegisterOpenAPIDoc(NewTestOpenAPI())
	return s.Handle(s.NewHandler(&Test{h}, opts...))
}

type testHandler struct {
	TestHandler
}

func (h *testHandler) GetProduct(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error {
	return h.TestHandler.GetProduct(vine.InitContext(ctx), in, out)
}

func (h *testHandler) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.TestHandler.CreateProduct(vine.InitContext(ctx), in, out)
}
